<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[学习路径(从上往下) by 王迎旭]]></title>
    <url>%2F2019%2F07%2F24%2FstudyGuide%2F</url>
    <content type="text"><![CDATA[所有的学习都建立在扎实的HTML,CSS,JavaScript的基础之上想入手前端，我却很迷茫不知道应该按照一个怎样的路去走。经过不断地查阅网上的资料以及实习时问周边的大佬。因此，我总结出了以下的学习路径。现在才大二，还有很长的一段路要走。 1.html5 -w3cschool 2.css3 -《精通CSS》 3.javaScript -《javaScript高级程序设计第3版》 -《javaScript DOM编程艺术第2版》 重点: 闭包，原型链，this，DOM编程, Ajax等 4.ES6 -《ES6标准入门》 重点: Promise, 箭头函数, Async/Await等 5.Node -《Node.js开发指南》 -《深入浅出Node.js》 -CNode社区 6.工程类工具 (1) 项目构建，打包，压缩: Webpack (2) 编译(将ES2015+转化为ES2015): Babel (3) 版本管理: Git(推荐，我是先学这个), SVN(较为落后) 7.框架 (1) 操作DOM: jQuery, zepto (2) 操作数据: Vue, React, Angular 重点: 设计思想，Diff算法，相关生态等 8.数据结构和算法(尽早学，培养思想) 极客时间-王争专栏 9.性能优化 -《高性能javaScript》 注意: 第五章，v8已经做优化；第九章，构建部分，现在基于webpack已经有很成熟的方案了；第十章工具不用看，直接去看chrome的devtool文档 10.网络编程 关键字: -fetch -websocket -jsonp -cors -formData -Fetch api -Ajax]]></content>
      <categories>
        <category>studyGuide</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[服务端渲染 vs 客户端渲染]]></title>
    <url>%2F2019%2F07%2F24%2FSSR%26CSR%2F</url>
    <content type="text"><![CDATA[今天遇到了两个新概念: 服务端渲染(SSR)和客户端渲染(CSR)。他们分别是什么，各自有什么区别呢？ 服务端渲染(SSR: Server Side Render)概念: 服务器端生成html字符串，在给客户端返回html前，先在指定区域内填充数据和符号，再发送给客户端。客户端只负责解析html 优点: 前端耗时少，因为不再依赖与js文件首屏渲染快，客户端只用解析html 有利于SEO(Search Engine Optimization)搜索引擎优化，因为数据在服务器端上显示都是渲染完成的 缺点: 服务器端性能消耗较大，用户体验差 不容易维护，前端修改html和css后端也需要修改 客户端渲染(CSR: Client Side Render)概念: html作为静态文件，客户端在请求的时候，服务端不做任何处理，直接以源文件的形式返回给客户端，然后根据html上的JavaScript，生成DOM插入html(摘自:、三毛的简书) 优点: 减少了服务器端的压力 可以实现局部刷新，无需每次都请求完整的页面 缺点: 前端耗时多，渲染慢 使用了React或者其他MVVM框架之后，因为页面的DOM元素都是在客户端根据js动态生成，网络上的爬虫不会等待数据加载完成之后再爬去数据，因此可供爬虫抓取分析的内容减少。不利于SEO 所以，现在很多公司的网站都是SSR和CSR混着用，比如京东的商品列表用的是服务端渲染，目的是为了优化SEO，而京东的商品评论列表用的是客户端渲染，优化了用户体验 如何判断一个页面是服务器端渲染还是客户端渲染呢？打开一个网页，右键点击查看网页源代码，如果页面上有的东西在源代码里面也可以看得到，则是服务端渲染；反之，如果右键查看网页源代码看不到，那么便是在客户端渲染的。]]></content>
      <categories>
        <category>Web</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Git学习笔记1]]></title>
    <url>%2F2019%2F07%2F24%2FGitLearn1%2F</url>
    <content type="text"><![CDATA[以下内容均来自于廖雪峰老师的Git教程，是我学习的过程中加以理解和简化做下的笔记，以便日后查找和翻阅 一. 介绍 Git是一个版本控制工具，能实现多个成员同时共同管理开发一个或多个文档的工具。 Git是一个分布式版本控制系统，不同于CVS以及SVN等集中式版本控制系统 什么是集中式版本控制系统？ 版本库集中存放在中央服务器，每个人需要用到文件时从中央服务器取得最新的版本，然后修改完毕后再将文件传回给中央服务器。 需要联网 什么是分布式版本控制系统？每个人的电脑上都有一个完整的版本库，工作时无需联网，可相互传文件，看到各自的修改。 二. 安装 上官网下载安装 安装完成后，在桌面 Git Bash here 输入命令: 12$git config --global user.name &quot;Your Name&quot;$git config --global user.email &quot;email@example.com&quot; git config命令的–global参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。 三. 创建版本库版本库又叫仓库(Repository), 里面的所有文件都可以被Git所管理，每个文件的修改，删除都能被跟踪，也可以还原。 选择一个合适的地方，我选择用 c:/git文件夹分别输入以下命令 123$ mkdir learngit$ cd learngit$ pwd 其中，pwd命令用于显示当前目录 然后再使用命令 1$ git init 把这个目录变成Git可管理的仓库 那么空仓库就建好了，这个文件夹中会自动生成一个隐藏的.git的目录，这个目录是Git来跟踪管理版本库的，没事不要去手动修改这个目录里面的文件。 使用命令 1$ ls -ah 可以看见这个隐藏的目录 三. 注意事项1.所有的版本控制系统，只能跟踪纯文本文件的改动，无法跟踪视频，图片或者word文件的改动。 2.建议使用标准的UTF-8编码。 3.不要使用记事本保存文件，因为开发团队在每个文件开头都添加了0xefbbbf的字符，导致可能一编译就莫名其妙报错。可使用Notepad++来代替 四. 添加文件到仓库步骤: 把文件放到仓库目录下面 使用命令: 1$ git add readme.txt 再使用命令: 1$ git commit -m &quot;wrote a readme file&quot; 前者为提交的文件，后者为提交的说明 可以先分别add多个文件后提交一个说明,例如: 123$ git add file1.txt$ git add file2.txt file3.txt$ git commit -m &quot;add 3 files.&quot; 五. 查看修改状态输入命令 1$ git status 可以查看所有仓库里面的文件的修改状态，如，modified 输入命令 1$ git diff readme.txt 可以查看具体的修改情况如下 -Git is a version control system. +Git is a distributed version control system. Git is free software \ No newline at end of file 小结 • 要随时掌握工作区的状态，使用git status命令。 • 如果git status告诉你有文件被修改过，用git diff可以查看修改内容。 六. 版本回退$ ++git add++ 和 $ ++git commit++的操作就像是存档，就算数据丢失或者任何意外情况发生，只要你电脑还在，就可以恢复到之前的情况。 输入命令 1$ git log 可以查看所有提交的历史纪录 而 1$ git log --pretty=oneline 则可以更美观一些 会输出 8b7f70a69ec9b385e04204fbd968048e264280d8 (HEAD -&gt; master) add distributed 0676cc984f57df152f2d2d886cd1e4caa13132ca wrote a readme file 前面遗传乱码都是commit id(版本号), 在SVN中为1，2，3…是一个用SHA加密方式计算出来的一个非常大的数字上往下的是从新到旧的版本 1$ git reset 命令可以让版本回退 HEAD^为回到上个版本 HEAD^^为上上个版本 HEAD^100为上100个版本 以此类推… 所以使用命令 1$ git reset --hard HEAD^ 就会回到上一个版本 一旦有误删的情况，只要命令行还没关掉，就还能回到刚刚那个版本往上找版本号输入命令行 1$ git reset --hard 1094a 1094a为版本号的前5位 但是如果命令行关掉了 还是能使用命令git reflog来回到之前的版本的 七. 工作区和暂存区 工作区就是电脑里面能看到的目录，如刚刚创建的learngit 工作区里面的隐藏目录.git不是工作区，而是git的版本库 Git的版本库里面有一个称为stage的暂存区，以及Git自动创建的第一个分支master和指向master的指针HEAD Git add指令其实是把文件修改添加到暂存区 Git commit指令是把暂存区的所有内容提交到当前分支 1$ git diff HEAD -- readme.txt 命令可以查看工作区和master分支里面的文件内容区别 命令： 1$ git checkout -- readme.txt 可以把readme.txt文件在工作区的修改全部撤销 一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态 一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。 ==慎用此命令，因为会重写工作区！== git checkout – file命令中的–很重要，没有–，就变成了“切换到另一个分支”的命令，我们在后面的分支管理中会再次遇到git checkout命令。 已经添加到暂存区的文件，还未提交，可以用命令: 1$ git reset HEAD readme.txt 来撤回到工作区 然后再用命令 1$ Git checkout -- reset readme.txt 来将工作区的改动恢复到原来的状态 小结 场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout – file。 场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD ，就回到了场景1，第二步按场景1操作。 场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库 git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。 八. 在github上绑定ssh九. 在github上创建新的仓库使用命令 1$ git remote add origin git@github.com:WangyingxuHalo/learngit.git 来关联远程库 添加后，远程库的名字就是origin，这是Git默认的叫法 下一步，就可以把本地库(即master分支)的所有内容推送到远程库上: 使用命令: 1$ git push -u origin master -u指令指的是：不仅把版本库的内容提交，而且关联 只有第一次需要。以后就不用再输入-u指令了 以后，只要本地作了提交，就可以通过命令 1$ git push origin master 来同步到github上 十. 将远程仓库同步到本地仓库输入命令: 1$ git clone git@github.com:WangyingxuHalo/GitTry.git Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快 十一. 分支和合并创建dev分支，然后切换到dev分支 命令: 1$ git checkout -b dev git checkout命令加上-b参数表示创建并切换，相当于以下两条命令： 12$ git branch dev$ git checkout dev git branch dev为创建名为dev的分支 git checkout dev为切换到名为dev的分支 然后我们可以用命令: 1$ git branch 来查看当前的分支 然后之后的操作就都是在dev这个branch上进行的了 可以进行git add 和 git commit 现在，dev分支的工作完成，我们就可以切换回master分支： 切换回master分支后，再查看一个readme.txt文件，刚才添加的内容不见了！因为那个提交是在dev分支上，而master分支此刻的提交点并没有变： 然后使用命令把dev分支的工作成果合并到master分支上： 1$ git merge dev git merge命令用于合并指定分支到当前分支。 合并完成后，就可以放心地删除dev分支了： 1$ git branch -d dev 小结 Git鼓励大量使用分支： 查看分支：git branch 创建分支：git branch 切换分支：git checkout 创建+切换分支：git checkout -b 合并某分支到当前分支：git merge 删除分支：git branch -d]]></content>
      <categories>
        <category>Git</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[js之获取浏览器语言]]></title>
    <url>%2F2019%2F07%2F22%2FnavigatorLanguage%2F</url>
    <content type="text"><![CDATA[navigator.language和navigator.browserLanguage&#8195;&#8195;今天看代码的时候看到了navigator.language以及navigator.browserLanguage那这些分别指代的是哪里的语言呢？我百度了一下W3C文档上写着：window.navigator.languageReturns a language tag representing the user’s preferred language. 什么意思呢？也就是说，每个浏览器会有一个语言列表的设置，用户可以设置自己的首选语言，那么window.navigator.language就会返回浏览器中用户的首选语言 例如我在chrome浏览器中使用以下语句 1console.log(window.navigator.language) 会输出 ‘zh-CN’ 而将首选语言改为英文之后会输出 ‘en’ navigator.browserLanguage和前面的类似，不过各种浏览器有不同的兼容看见一篇博客如下 IE6 IE7 IE8 Firefox Safari Chrome Opera navigator.language undefined zh-CN zh-CN navigator.userLanguage zh-cn undefined zh-cn navigator.browserLanguage zh-cn undefined zh-cn navigator.systemLanguage zh-cn undefined undefined 图片来源: https://blog.csdn.net/lvjin110/article/details/37663067 但是我自己尝试的时候IE浏览器也会打印 ‘zh-CN’可能这个版本比较老，现在IE浏览器版本高了很多吧 为了适配所有浏览器，书写代码的时候可以这么写: 1const browserLang = navigator.language || navigator.browserLanguage || &apos;zh&apos; 意思是：如果navigator.language的值为undefined，则使用navigator.browserLanguage，如果navigator.browserLanguage的值为undefined，则取’zh’ 因为可能有大小写的区别，根据写法和判断的不同，也可以写成这样： 1(navigator.language || navigator.browserLanguage).toLowerCase() 这样基本就能考虑到所有浏览器的兼容性了]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
</search>
