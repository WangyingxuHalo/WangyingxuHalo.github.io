<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>王迎旭的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-07-24T08:10:30.956Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Siri Wang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>学习路径(从上往下) by 王迎旭</title>
    <link href="http://yoursite.com/2019/07/24/studyGuide/"/>
    <id>http://yoursite.com/2019/07/24/studyGuide/</id>
    <published>2019-07-24T07:59:44.701Z</published>
    <updated>2019-07-24T08:10:30.956Z</updated>
    
    <content type="html"><![CDATA[<h4 id="所有的学习都建立在扎实的HTML-CSS-JavaScript的基础之上"><a href="#所有的学习都建立在扎实的HTML-CSS-JavaScript的基础之上" class="headerlink" title="所有的学习都建立在扎实的HTML,CSS,JavaScript的基础之上"></a>所有的学习都建立在扎实的HTML,CSS,JavaScript的基础之上</h4><p>想入手前端，我却很迷茫不知道应该按照一个怎样的路去走。经过不断地查阅网上的资料以及实习时问周边的大佬。因此，我总结出了以下的学习路径。现在才大二，还有很长的一段路要走。</p><p><strong>1.html5</strong></p><blockquote><p>-w3cschool</p></blockquote><p><strong>2.css3</strong></p><blockquote><p>-《精通CSS》</p></blockquote><p><strong>3.javaScript</strong></p><blockquote><p>-《javaScript高级程序设计第3版》   </p><p>-《javaScript DOM编程艺术第2版》</p></blockquote><p>重点: 闭包，原型链，this，DOM编程, Ajax等</p><p><strong>4.ES6</strong></p><blockquote><p>-《ES6标准入门》</p></blockquote><p>重点: Promise, 箭头函数, Async/Await等</p><p><strong>5.Node</strong></p><blockquote><p>-《Node.js开发指南》</p><p>-《深入浅出Node.js》</p><p>-CNode社区</p></blockquote><p><strong>6.工程类工具</strong></p><blockquote><p>(1) 项目构建，打包，压缩: Webpack   </p></blockquote><blockquote><p>(2) 编译(将ES2015+转化为ES2015): Babel   </p></blockquote><blockquote><p>(3) 版本管理: Git(推荐，我是先学这个), SVN(较为落后)</p></blockquote><p><strong>7.框架</strong></p><blockquote><p>(1) 操作DOM: jQuery, zepto   </p><p>(2) 操作数据: Vue, React, Angular</p></blockquote><p>重点: 设计思想，Diff算法，相关生态等</p><p><strong>8.数据结构和算法(尽早学，培养思想)</strong></p><blockquote><p>极客时间-王争专栏</p></blockquote><p><strong>9.性能优化</strong></p><blockquote><p>-《高性能javaScript》</p></blockquote><p>注意: 第五章，v8已经做优化；第九章，构建部分，现在基于webpack已经有很成熟的方案了；第十章工具不用看，直接去看chrome的devtool文档</p><p><strong>10.网络编程</strong>   </p><p>关键字:</p><blockquote><p>-fetch</p><p>-websocket</p><p>-jsonp</p><p>-cors</p><p>-formData</p><p>-Fetch api</p><p>-Ajax</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;所有的学习都建立在扎实的HTML-CSS-JavaScript的基础之上&quot;&gt;&lt;a href=&quot;#所有的学习都建立在扎实的HTML-CSS-JavaScript的基础之上&quot; class=&quot;headerlink&quot; title=&quot;所有的学习都建立在扎实的HTML,CSS
      
    
    </summary>
    
      <category term="studyGuide" scheme="http://yoursite.com/categories/studyGuide/"/>
    
    
  </entry>
  
  <entry>
    <title>服务端渲染 vs 客户端渲染</title>
    <link href="http://yoursite.com/2019/07/24/SSR&amp;CSR/"/>
    <id>http://yoursite.com/2019/07/24/SSR&amp;CSR/</id>
    <published>2019-07-24T06:17:11.696Z</published>
    <updated>2019-07-24T06:27:55.254Z</updated>
    
    <content type="html"><![CDATA[<p>今天遇到了两个新概念: 服务端渲染(SSR)和客户端渲染(CSR)。他们分别是什么，各自有什么区别呢？</p><h3 id="服务端渲染-SSR-Server-Side-Render"><a href="#服务端渲染-SSR-Server-Side-Render" class="headerlink" title="服务端渲染(SSR: Server Side Render)"></a>服务端渲染(SSR: Server Side Render)</h3><p>概念: <strong>服务器端</strong>生成html字符串，在给客户端返回html前，先在指定区域内填充数据和符号，再发送给客户端。<strong>客户端只负责解析html</strong></p><blockquote><p>优点: </p><ol><li>前端耗时少，因为不再依赖与js文件首屏渲染快，客户端只用解析html</li><li>有利于SEO(Search Engine Optimization)搜索引擎优化，因为数据在服务器端上显示都是渲染完成的</li></ol></blockquote><br> <blockquote><p>缺点:</p><ol><li>服务器端性能消耗较大，用户体验差</li><li>不容易维护，前端修改html和css后端也需要修改</li></ol></blockquote><hr><h3 id="客户端渲染-CSR-Client-Side-Render"><a href="#客户端渲染-CSR-Client-Side-Render" class="headerlink" title="客户端渲染(CSR: Client Side Render)"></a>客户端渲染(CSR: Client Side Render)</h3><p>概念: html作为静态文件，客户端在请求的时候，服务端不做任何处理，直接以源文件的形式返回给客户端，然后根据html上的JavaScript，生成DOM插入html(摘自:<a href="https://www.jianshu.com/p/656a1666a1c5?utm_source=oschina-app" target="_blank" rel="noopener">、三毛的简书</a>)</p><blockquote><p>优点: </p><ol><li>减少了服务器端的压力   </li><li>可以实现局部刷新，无需每次都请求完整的页面</li></ol></blockquote><br><blockquote><p>缺点: </p><ol><li>前端耗时多，渲染慢   </li><li>使用了React或者其他MVVM框架之后，因为页面的DOM元素都是在客户端根据js动态生成，网络上的爬虫不会等待数据加载完成之后再爬去数据，因此可供爬虫抓取分析的内容减少。不利于SEO</li></ol></blockquote><hr><p>所以，现在很多公司的网站都是SSR和CSR混着用，比如京东的商品列表用的是服务端渲染，目的是为了优化SEO，而京东的商品评论列表用的是客户端渲染，优化了用户体验</p><hr><h3 id="如何判断一个页面是服务器端渲染还是客户端渲染呢？"><a href="#如何判断一个页面是服务器端渲染还是客户端渲染呢？" class="headerlink" title="如何判断一个页面是服务器端渲染还是客户端渲染呢？"></a>如何判断一个页面是服务器端渲染还是客户端渲染呢？</h3><p>打开一个网页，右键点击查看网页源代码，如果页面上有的东西在源代码里面也可以看得到，则是服务端渲染；反之，如果右键查看网页源代码看不到，那么便是在客户端渲染的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天遇到了两个新概念: 服务端渲染(SSR)和客户端渲染(CSR)。他们分别是什么，各自有什么区别呢？&lt;/p&gt;
&lt;h3 id=&quot;服务端渲染-SSR-Server-Side-Render&quot;&gt;&lt;a href=&quot;#服务端渲染-SSR-Server-Side-Render&quot; cla
      
    
    </summary>
    
      <category term="Web" scheme="http://yoursite.com/categories/Web/"/>
    
    
  </entry>
  
  <entry>
    <title>Git学习笔记1</title>
    <link href="http://yoursite.com/2019/07/24/GitLearn1/"/>
    <id>http://yoursite.com/2019/07/24/GitLearn1/</id>
    <published>2019-07-24T02:06:33.801Z</published>
    <updated>2019-07-24T06:27:48.557Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>以下内容均来自于<a href="https://www.liaoxuefeng.com/wiki/896043488029600" target="_blank" rel="noopener">廖雪峰老师的Git教程</a>，是我学习的过程中加以理解和简化做下的笔记，以便日后查找和翻阅</p></blockquote><h3 id="一-介绍"><a href="#一-介绍" class="headerlink" title="一. 介绍"></a>一. 介绍</h3><ol><li><p>Git是一个版本控制工具，能实现多个成员同时共同管理开发一个或多个文档的工具。</p></li><li><p>Git是一个<strong>分布式版本控制系统</strong>，不同于CVS以及SVN等集中式版本控制系统</p></li></ol><h4 id="什么是集中式版本控制系统？"><a href="#什么是集中式版本控制系统？" class="headerlink" title="什么是集中式版本控制系统？"></a>什么是集中式版本控制系统？</h4><ol><li>版本库集中存放在中央服务器，每个人需要用到文件时从中央服务器取得最新的版本，然后修改完毕后再将文件传回给中央服务器。</li><li>需要联网</li></ol><h4 id="什么是分布式版本控制系统？"><a href="#什么是分布式版本控制系统？" class="headerlink" title="什么是分布式版本控制系统？"></a>什么是分布式版本控制系统？</h4><p>每个人的电脑上都有一个完整的版本库，工作时无需联网，可相互传文件，看到各自的修改。</p><hr><h3 id="二-安装"><a href="#二-安装" class="headerlink" title="二. 安装"></a>二. 安装</h3><ol><li>上官网下载安装</li><li>安装完成后，在桌面 Git Bash here</li><li>输入命令:</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$git config --global user.name &quot;Your Name&quot;</span><br><span class="line">$git config --global user.email &quot;email@example.com&quot;</span><br></pre></td></tr></table></figure><p>git config命令的–<strong>global参数</strong>，<br>用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。</p><hr><h3 id="三-创建版本库"><a href="#三-创建版本库" class="headerlink" title="三. 创建版本库"></a>三. 创建版本库</h3><p>版本库又叫仓库(Repository), 里面的所有文件都可以被Git所管理，每个文件的修改，删除都能被跟踪，也可以还原。</p><p>选择一个合适的地方，我选择用 c:/git文件夹<br>分别输入以下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir learngit</span><br><span class="line">$ cd learngit</span><br><span class="line">$ pwd</span><br></pre></td></tr></table></figure><p>其中，pwd命令用于显示当前目录</p><br><p>然后再使用命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br></pre></td></tr></table></figure><p>把这个目录变成Git可管理的仓库</p><p>那么空仓库就建好了，<br>这个文件夹中会自动生成一个隐藏的.git的目录，这个目录是Git来跟踪管理版本库的，没事不要去手动修改这个目录里面的文件。</p><br>使用命令<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ls -ah</span><br></pre></td></tr></table></figure><p>可以看见这个隐藏的目录</p><hr><h3 id="三-注意事项"><a href="#三-注意事项" class="headerlink" title="三. 注意事项"></a>三. 注意事项</h3><p>1.所有的版本控制系统，只能跟踪纯文本文件的改动，无法跟踪视频，图片或者word文件的改动。</p><p>2.建议使用标准的UTF-8编码。</p><p>3.不要使用记事本保存文件，因为开发团队在每个文件开头都添加了0xefbbbf的字符，导致可能一编译就莫名其妙报错。可使用Notepad++来代替</p><hr><h3 id="四-添加文件到仓库"><a href="#四-添加文件到仓库" class="headerlink" title="四. 添加文件到仓库"></a>四. 添加文件到仓库</h3><p>步骤:</p><ol><li>把文件放到仓库目录下面</li><li>使用命令:</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add readme.txt</span><br></pre></td></tr></table></figure><p>再使用命令:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m &quot;wrote a readme file&quot;</span><br></pre></td></tr></table></figure><p>前者为提交的文件，后者为提交的说明</p><p>可以先分别add多个文件后提交一个说明,例如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git add file1.txt</span><br><span class="line">$ git add file2.txt file3.txt</span><br><span class="line">$ git commit -m &quot;add 3 files.&quot;</span><br></pre></td></tr></table></figure><hr><h3 id="五-查看修改状态"><a href="#五-查看修改状态" class="headerlink" title="五. 查看修改状态"></a>五. 查看修改状态</h3><p>输入命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br></pre></td></tr></table></figure><p>可以查看所有仓库里面的文件的修改状态，如，modified</p><p>输入命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git diff readme.txt</span><br></pre></td></tr></table></figure><p>可以查看具体的修改情况<br>如下   </p><blockquote><p>-Git is a version control system.   </p><p>+Git is a distributed version control system.   </p><p> Git is free software   </p><p>\ No newline at end of file</p></blockquote><p>小结   </p><p>•    要随时掌握工作区的状态，使用git status命令。   </p><p>•    如果git status告诉你有文件被修改过，用git diff可以查看修改内容。</p><hr><h3 id="六-版本回退"><a href="#六-版本回退" class="headerlink" title="六. 版本回退"></a>六. 版本回退</h3><p>$ ++git add++ 和 $ ++git commit++的操作就像是存档，就算数据丢失或者任何意外情况发生，只要你电脑还在，就可以恢复到之前的情况。</p><p>输入命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git log</span><br></pre></td></tr></table></figure><p>可以查看所有提交的历史纪录</p><br>而<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git log --pretty=oneline</span><br></pre></td></tr></table></figure><p>则可以更美观一些</p><p>会输出</p><blockquote><p>8b7f70a69ec9b385e04204fbd968048e264280d8 (HEAD -&gt; master) add distributed   </p><p>0676cc984f57df152f2d2d886cd1e4caa13132ca wrote a readme file</p></blockquote><p>前面遗传乱码都是commit id(版本号), 在SVN中为1，2，3…<br>是一个用SHA加密方式计算出来的一个非常大的数字<br>上往下的是从新到旧的版本<br><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset</span><br></pre></td></tr></table></figure><p>命令可以让版本回退   </p><p>HEAD^为回到上个版本   </p><p>HEAD^^为上上个版本</p><p>HEAD^100为上100个版本   </p><p>以此类推…</p><hr><p>所以使用命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --hard HEAD^</span><br></pre></td></tr></table></figure><p>就会回到上一个版本</p><p>一旦有误删的情况，<br>只要命令行还没关掉，就还能回到刚刚那个版本<br>往上找版本号<br>输入命令行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --hard 1094a</span><br></pre></td></tr></table></figure><p>1094a为版本号的前5位</p><p>但是如果命令行关掉了</p><p>还是能使用命令<br>git reflog<br>来回到之前的版本的</p><hr><h3 id="七-工作区和暂存区"><a href="#七-工作区和暂存区" class="headerlink" title="七. 工作区和暂存区"></a>七. 工作区和暂存区</h3><ol><li>工作区就是电脑里面能看到的目录，如刚刚创建的learngit</li><li>工作区里面的隐藏目录.git不是工作区，而是git的版本库</li></ol><blockquote><p>Git的版本库里面有一个称为stage的暂存区，以及Git自动创建的第一个分支master和指向master的指针HEAD</p></blockquote><p><strong>Git add指令</strong>其实是把文件修改添加到暂存区   </p><p><strong>Git commit指令</strong>是把暂存区的所有内容提交到当前分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git diff HEAD -- readme.txt</span><br></pre></td></tr></table></figure><p> 命令可以查看工作区和master分支里面的文件内容区别</p><p>命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -- readme.txt</span><br></pre></td></tr></table></figure><p>可以把readme.txt文件在工作区的修改全部撤销</p><blockquote><p>一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态</p><p>一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。</p></blockquote><p>==慎用此命令，因为会重写工作区！==</p><p>git checkout – file命令中的–很重要，没有–，就变成了“切换到另一个分支”的命令，我们在后面的分支管理中会再次遇到git checkout命令。</p><p>已经添加到暂存区的文件，还未提交，可以用命令:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset HEAD readme.txt</span><br></pre></td></tr></table></figure><p>来撤回到工作区<br><br></p><p>然后再用命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ Git checkout -- reset readme.txt</span><br></pre></td></tr></table></figure><p>来将工作区的改动恢复到原来的状态</p><p>小结   </p><blockquote><p>场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout – file。   </p><p>场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD <file>，就回到了场景1，第二步按场景1操作。   </file></p><p>场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库</p></blockquote><p>git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。</p><h3 id="八-在github上绑定ssh"><a href="#八-在github上绑定ssh" class="headerlink" title="八. 在github上绑定ssh"></a>八. 在github上绑定ssh</h3><h3 id="九-在github上创建新的仓库"><a href="#九-在github上创建新的仓库" class="headerlink" title="九. 在github上创建新的仓库"></a>九. 在github上创建新的仓库</h3><p>使用命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add origin git@github.com:WangyingxuHalo/learngit.git</span><br></pre></td></tr></table></figure><p>来关联远程库</p><p>添加后，远程库的名字就是origin，这是Git默认的叫法</p><p>下一步，就可以把本地库(即master分支)的所有内容推送到远程库上:   </p><p>使用命令:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push -u origin master</span><br></pre></td></tr></table></figure><p>-u指令指的是：不仅把版本库的内容提交，而且关联</p><p>只有第一次需要。以后就不用再输入-u指令了</p><p>以后，只要本地作了提交，就可以通过命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin master</span><br></pre></td></tr></table></figure><p>来同步到github上</p><hr><h3 id="十-将远程仓库同步到本地仓库"><a href="#十-将远程仓库同步到本地仓库" class="headerlink" title="十. 将远程仓库同步到本地仓库"></a>十. 将远程仓库同步到本地仓库</h3><p>输入命令: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone git@github.com:WangyingxuHalo/GitTry.git</span><br></pre></td></tr></table></figure><p>Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快</p><hr><h3 id="十一-分支和合并"><a href="#十一-分支和合并" class="headerlink" title="十一. 分支和合并"></a>十一. 分支和合并</h3><p>创建dev分支，然后切换到dev分支</p><p>命令:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b dev</span><br></pre></td></tr></table></figure><p>git checkout命令加上-<strong>b</strong>参数表示创建并切换，相当于以下两条命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git branch dev</span><br><span class="line">$ git checkout dev</span><br></pre></td></tr></table></figure><p>git branch dev为创建名为dev的分支   </p><p>git checkout dev为切换到名为dev的分支</p><p>然后我们可以用命令:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch</span><br></pre></td></tr></table></figure><p>来查看当前的分支</p><p>然后之后的操作就都是在dev这个branch上进行的了</p><p>可以进行git add 和 git commit</p><p>现在，dev分支的工作完成，我们就可以切换回master分支：</p><p>切换回master分支后，再查看一个readme.txt文件，刚才添加的内容不见了！因为那个提交是在dev分支上，而master分支此刻的提交点并没有变：</p><p>然后使用命令把dev分支的工作成果合并到master分支上：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git merge dev</span><br></pre></td></tr></table></figure><p><strong>git merge</strong>命令用于合并指定分支到当前分支。</p><p>合并完成后，就可以放心地删除dev分支了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -d dev</span><br></pre></td></tr></table></figure><p>小结   </p><blockquote><p>Git鼓励大量使用分支：   </p><p>查看分支：git branch   </p><p>创建分支：git branch <name>   </name></p><p>切换分支：git checkout <name>   </name></p><p>创建+切换分支：git checkout -b <name>   </name></p><p>合并某分支到当前分支：git merge <name>   </name></p><p>删除分支：git branch -d <name></name></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;以下内容均来自于&lt;a href=&quot;https://www.liaoxuefeng.com/wiki/896043488029600&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;廖雪峰老师的Git教程&lt;/a&gt;，是我学习的过程中加以
      
    
    </summary>
    
      <category term="Git" scheme="http://yoursite.com/categories/Git/"/>
    
    
  </entry>
  
  <entry>
    <title>js之获取浏览器语言</title>
    <link href="http://yoursite.com/2019/07/22/navigatorLanguage/"/>
    <id>http://yoursite.com/2019/07/22/navigatorLanguage/</id>
    <published>2019-07-22T08:55:58.064Z</published>
    <updated>2019-07-23T02:15:43.659Z</updated>
    
    <content type="html"><![CDATA[<h1 id="navigator-language和navigator-browserLanguage"><a href="#navigator-language和navigator-browserLanguage" class="headerlink" title="navigator.language和navigator.browserLanguage"></a>navigator.language和navigator.browserLanguage</h1><p>&#8195;&#8195;今天看代码的时候看到了navigator.language以及navigator.browserLanguage<br><br>那这些分别指代的是哪里的语言呢？<br>我百度了一下<br><br>W3C文档上写着：<br><br><strong>window.navigator.language<br>Returns a language tag representing the user’s preferred language.</strong><br></p><h2 id="什么意思呢？"><a href="#什么意思呢？" class="headerlink" title="什么意思呢？"></a>什么意思呢？</h2><p>也就是说，每个浏览器会有一个语言列表的设置，用户可以设置自己的首选语言，那么window.navigator.language<br>就会返回浏览器中用户的首选语言</p><p>例如我在chrome浏览器中使用以下语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(window.navigator.language)</span><br></pre></td></tr></table></figure><p>会输出 ‘zh-CN’</p><p>而将首选语言改为英文之后会输出 ‘en’</p><hr><p>navigator.browserLanguage和前面的类似，<br><br>不过各种浏览器有不同的兼容<br><br>看见一篇博客<br>如下</p><table><thead><tr><th align="left"></th><th align="center">IE6 IE7 IE8</th><th align="center">Firefox Safari Chrome</th><th align="right">Opera</th></tr></thead><tbody><tr><td align="left">navigator.language</td><td align="center">undefined</td><td align="center">zh-CN</td><td align="right">zh-CN</td></tr><tr><td align="left">navigator.userLanguage</td><td align="center">zh-cn</td><td align="center">undefined</td><td align="right">zh-cn</td></tr><tr><td align="left">navigator.browserLanguage</td><td align="center">zh-cn</td><td align="center">undefined</td><td align="right">zh-cn</td></tr><tr><td align="left">navigator.systemLanguage</td><td align="center">zh-cn</td><td align="center">undefined</td><td align="right">undefined</td></tr></tbody></table><p>图片来源:</p><blockquote><p><a href="https://blog.csdn.net/lvjin110/article/details/37663067" target="_blank" rel="noopener">https://blog.csdn.net/lvjin110/article/details/37663067</a></p></blockquote><p>但是我自己尝试的时候IE浏览器也会打印 ‘zh-CN’<br>可能这个版本比较老，现在IE浏览器版本高了很多吧</p><p>为了适配所有浏览器，书写代码的时候可以这么写:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const browserLang = navigator.language || navigator.browserLanguage || &apos;zh&apos;</span><br></pre></td></tr></table></figure><p>意思是：<br><br>如果navigator.language的值为undefined，则使用navigator.browserLanguage，如果navigator.browserLanguage的值为undefined，则取’zh’</p><p>因为可能有大小写的区别，根据写法和判断的不同，也可以写成这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(navigator.language || navigator.browserLanguage).toLowerCase()</span><br></pre></td></tr></table></figure><p>这样基本就能考虑到所有浏览器的兼容性了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;navigator-language和navigator-browserLanguage&quot;&gt;&lt;a href=&quot;#navigator-language和navigator-browserLanguage&quot; class=&quot;headerlink&quot; title=&quot;navi
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
  </entry>
  
</feed>
